//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18408.
// 
#pragma warning disable 1591

namespace Outsourcing_System.MailService1 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MailServiceSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class MailService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendPendingMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEMailOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MailService() {
            this.Url = "http://192.168.0.42:28742/RHYWEMailService/MailService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event SendMailCompletedEventHandler SendMailCompleted;
        
        /// <remarks/>
        public event SendPendingMailCompletedEventHandler SendPendingMailCompleted;
        
        /// <remarks/>
        public event SendEMailCompletedEventHandler SendEMailCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail(string sFrom, string[] sTo, string[] sCC, string[] sBCC, string sSubject, string sBody, int mailFormat, bool useLiveAccount) {
            object[] results = this.Invoke("SendMail", new object[] {
                        sFrom,
                        sTo,
                        sCC,
                        sBCC,
                        sSubject,
                        sBody,
                        mailFormat,
                        useLiveAccount});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailAsync(string sFrom, string[] sTo, string[] sCC, string[] sBCC, string sSubject, string sBody, int mailFormat, bool useLiveAccount) {
            this.SendMailAsync(sFrom, sTo, sCC, sBCC, sSubject, sBody, mailFormat, useLiveAccount, null);
        }
        
        /// <remarks/>
        public void SendMailAsync(string sFrom, string[] sTo, string[] sCC, string[] sBCC, string sSubject, string sBody, int mailFormat, bool useLiveAccount, object userState) {
            if ((this.SendMailOperationCompleted == null)) {
                this.SendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailOperationCompleted);
            }
            this.InvokeAsync("SendMail", new object[] {
                        sFrom,
                        sTo,
                        sCC,
                        sBCC,
                        sSubject,
                        sBody,
                        mailFormat,
                        useLiveAccount}, this.SendMailOperationCompleted, userState);
        }
        
        private void OnSendMailOperationCompleted(object arg) {
            if ((this.SendMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailCompleted(this, new SendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendPendingMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendPendingMail(string sFromName, string sFromAddress, string fromUserAccount, string fromAddressPassword, string[] sTo, string[] sCC, string[] sBCC, string sSubject, string sBody, int mailFormat, bool useLiveAccount, int context) {
            object[] results = this.Invoke("SendPendingMail", new object[] {
                        sFromName,
                        sFromAddress,
                        fromUserAccount,
                        fromAddressPassword,
                        sTo,
                        sCC,
                        sBCC,
                        sSubject,
                        sBody,
                        mailFormat,
                        useLiveAccount,
                        context});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendPendingMailAsync(string sFromName, string sFromAddress, string fromUserAccount, string fromAddressPassword, string[] sTo, string[] sCC, string[] sBCC, string sSubject, string sBody, int mailFormat, bool useLiveAccount, int context) {
            this.SendPendingMailAsync(sFromName, sFromAddress, fromUserAccount, fromAddressPassword, sTo, sCC, sBCC, sSubject, sBody, mailFormat, useLiveAccount, context, null);
        }
        
        /// <remarks/>
        public void SendPendingMailAsync(string sFromName, string sFromAddress, string fromUserAccount, string fromAddressPassword, string[] sTo, string[] sCC, string[] sBCC, string sSubject, string sBody, int mailFormat, bool useLiveAccount, int context, object userState) {
            if ((this.SendPendingMailOperationCompleted == null)) {
                this.SendPendingMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendPendingMailOperationCompleted);
            }
            this.InvokeAsync("SendPendingMail", new object[] {
                        sFromName,
                        sFromAddress,
                        fromUserAccount,
                        fromAddressPassword,
                        sTo,
                        sCC,
                        sBCC,
                        sSubject,
                        sBody,
                        mailFormat,
                        useLiveAccount,
                        context}, this.SendPendingMailOperationCompleted, userState);
        }
        
        private void OnSendPendingMailOperationCompleted(object arg) {
            if ((this.SendPendingMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendPendingMailCompleted(this, new SendPendingMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendEMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendEMail(string sFrom, object[] sTo, object[] sCC, object[] sBCC, string sSubject, string sBody, int mailFormat, bool useLiveAccount) {
            object[] results = this.Invoke("SendEMail", new object[] {
                        sFrom,
                        sTo,
                        sCC,
                        sBCC,
                        sSubject,
                        sBody,
                        mailFormat,
                        useLiveAccount});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendEMailAsync(string sFrom, object[] sTo, object[] sCC, object[] sBCC, string sSubject, string sBody, int mailFormat, bool useLiveAccount) {
            this.SendEMailAsync(sFrom, sTo, sCC, sBCC, sSubject, sBody, mailFormat, useLiveAccount, null);
        }
        
        /// <remarks/>
        public void SendEMailAsync(string sFrom, object[] sTo, object[] sCC, object[] sBCC, string sSubject, string sBody, int mailFormat, bool useLiveAccount, object userState) {
            if ((this.SendEMailOperationCompleted == null)) {
                this.SendEMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEMailOperationCompleted);
            }
            this.InvokeAsync("SendEMail", new object[] {
                        sFrom,
                        sTo,
                        sCC,
                        sBCC,
                        sSubject,
                        sBody,
                        mailFormat,
                        useLiveAccount}, this.SendEMailOperationCompleted, userState);
        }
        
        private void OnSendEMailOperationCompleted(object arg) {
            if ((this.SendEMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEMailCompleted(this, new SendEMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SendMailCompletedEventHandler(object sender, SendMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SendPendingMailCompletedEventHandler(object sender, SendPendingMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendPendingMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendPendingMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SendEMailCompletedEventHandler(object sender, SendEMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591