//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18408.
// 
#pragma warning disable 1591

namespace Outsourcing_System.TableValidation {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ValidateExcelOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateTablesZipFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertXlsToXmlTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttachTablesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = "http://192.168.0.200:91/TableValidation/Service.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ValidateExcelCompletedEventHandler ValidateExcelCompleted;
        
        /// <remarks/>
        public event ValidateTablesZipFileCompletedEventHandler ValidateTablesZipFileCompleted;
        
        /// <remarks/>
        public event ConvertXlsToXmlTableCompletedEventHandler ConvertXlsToXmlTableCompleted;
        
        /// <remarks/>
        public event AttachTablesCompletedEventHandler AttachTablesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateExcel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateExcel(string Path) {
            object[] results = this.Invoke("ValidateExcel", new object[] {
                        Path});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateExcelAsync(string Path) {
            this.ValidateExcelAsync(Path, null);
        }
        
        /// <remarks/>
        public void ValidateExcelAsync(string Path, object userState) {
            if ((this.ValidateExcelOperationCompleted == null)) {
                this.ValidateExcelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateExcelOperationCompleted);
            }
            this.InvokeAsync("ValidateExcel", new object[] {
                        Path}, this.ValidateExcelOperationCompleted, userState);
        }
        
        private void OnValidateExcelOperationCompleted(object arg) {
            if ((this.ValidateExcelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateExcelCompleted(this, new ValidateExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateTablesZipFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateTablesZipFile(string Path) {
            object[] results = this.Invoke("ValidateTablesZipFile", new object[] {
                        Path});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateTablesZipFileAsync(string Path) {
            this.ValidateTablesZipFileAsync(Path, null);
        }
        
        /// <remarks/>
        public void ValidateTablesZipFileAsync(string Path, object userState) {
            if ((this.ValidateTablesZipFileOperationCompleted == null)) {
                this.ValidateTablesZipFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateTablesZipFileOperationCompleted);
            }
            this.InvokeAsync("ValidateTablesZipFile", new object[] {
                        Path}, this.ValidateTablesZipFileOperationCompleted, userState);
        }
        
        private void OnValidateTablesZipFileOperationCompleted(object arg) {
            if ((this.ValidateTablesZipFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateTablesZipFileCompleted(this, new ValidateTablesZipFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertXlsToXmlTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConvertXlsToXmlTable(string Path) {
            object[] results = this.Invoke("ConvertXlsToXmlTable", new object[] {
                        Path});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertXlsToXmlTableAsync(string Path) {
            this.ConvertXlsToXmlTableAsync(Path, null);
        }
        
        /// <remarks/>
        public void ConvertXlsToXmlTableAsync(string Path, object userState) {
            if ((this.ConvertXlsToXmlTableOperationCompleted == null)) {
                this.ConvertXlsToXmlTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertXlsToXmlTableOperationCompleted);
            }
            this.InvokeAsync("ConvertXlsToXmlTable", new object[] {
                        Path}, this.ConvertXlsToXmlTableOperationCompleted, userState);
        }
        
        private void OnConvertXlsToXmlTableOperationCompleted(object arg) {
            if ((this.ConvertXlsToXmlTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertXlsToXmlTableCompleted(this, new ConvertXlsToXmlTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AttachTables", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AttachTables(string rhywFilePath, string TablesZipPath) {
            object[] results = this.Invoke("AttachTables", new object[] {
                        rhywFilePath,
                        TablesZipPath});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AttachTablesAsync(string rhywFilePath, string TablesZipPath) {
            this.AttachTablesAsync(rhywFilePath, TablesZipPath, null);
        }
        
        /// <remarks/>
        public void AttachTablesAsync(string rhywFilePath, string TablesZipPath, object userState) {
            if ((this.AttachTablesOperationCompleted == null)) {
                this.AttachTablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachTablesOperationCompleted);
            }
            this.InvokeAsync("AttachTables", new object[] {
                        rhywFilePath,
                        TablesZipPath}, this.AttachTablesOperationCompleted, userState);
        }
        
        private void OnAttachTablesOperationCompleted(object arg) {
            if ((this.AttachTablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachTablesCompleted(this, new AttachTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ValidateExcelCompletedEventHandler(object sender, ValidateExcelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateExcelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateExcelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ValidateTablesZipFileCompletedEventHandler(object sender, ValidateTablesZipFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateTablesZipFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateTablesZipFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ConvertXlsToXmlTableCompletedEventHandler(object sender, ConvertXlsToXmlTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertXlsToXmlTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertXlsToXmlTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AttachTablesCompletedEventHandler(object sender, AttachTablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttachTablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttachTablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591